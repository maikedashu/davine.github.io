<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[访存指令推测执行模块介绍]]></title>
    <url>%2F2019%2F03%2F09%2Fhello%2F</url>
    <content type="text"><![CDATA[关键词：访存指令 推测执行 访存指令推测执行模块简介在本项目的设计中，采用超标量流水线技术的性能目标是获得最大的指令吞吐率。访存指令推测执行模块主要加速了处理器中存储器数据流的流动。存储指令的来源主要是高级程序设计语言中对内存进行存储操作，比如声明一个固定大小的数组，然后对这个数组赋初值，或取出数组中的某一个值，并对该值进行运算后在存回数组。这些动作都有可能产生大量的LW和SW指令，而对不同数据结构的使用，也会影响LW,SW指令的产生，如下图所示，测试程序为SPEC95对内存中不同数据结构的访问频率。通过上图可以看出，发生过LW的数据区以后很大概率也会发生SW，相对地，发生过SW后也会有很大几率发生LW。接下来的一种分析方法是采用LW或SW指令自身为主角，观察它们在不同数据结构中发生RAR,RAW,WAW,WAR的概率是多少，如下图所示。图中第一列如099的数字表示在SPEC95中不同的测试程序。通过上图我们可以看出，存储指令发生数据相关的可能是非常高的，最高的甚至达到了93%！所以合理的调度访存指令并推测执行是很有必要的。我们使用的一种方案是通过MDST和MDPT来识别出具有RAW的LW指令，避免推测执行后发生访问顺序上的违例以影响性能。MDST和MDPT表如下图所示。在本次设计中，我们主要解决了高级程序设计语言中，循环展开后产生的动态数据依赖，考虑以下代码段。12for(i=0;i&lt;n;i++) a[i+c]=a[i]+k; 循环在执行时，每次都会先取出a[i]中的数据，加上常量k后，再存入a[i+c]中，此时便会发生在不同次的循环迭代间，发生大量数据冲突，因为我们是要提前推测执行LW，所以不采取措施会发生大量的违例错误，从而大大降低了性能，汇编代码如下。12345678lw1 $t2,0($t1)addi $t3,$t2,ksw1 $t3,0($t1)lw2 $t2,0($t1)addi $t3,$t2,ksw2 $t2,0($t1)lw3 $t3,0($t1)...... 从以上代码中可以看出，sw1与lw2，sw2与lw3有着数据冲突，所以贸然将lw指令提前执行是不可取的，于是我们采用两个表加上一个预测器来完成对lw,sw指令对的配对以及后续指令的推测，配对过程叫做synchronizes。执行过程如下图所示。1. 将发生违例的LW，SW指令对填入MDPT表项 2. 将表项V置为1，表示该表项已被占用 3. 将违例的LW2,SW1的PC值相减，得出DIST并填入表项 4. 下条LW3执行时，首先访问MDPT，并未找出和它地址相同的LW 5. 读取Memory speculation predictor，并将F/E置为0 6. 预测结果被分配MDST，延迟执行 7. SW2执行时和MDPT表项中DIST相加，得出LW3的指令地址，并与LDPC比较 8. 将SW2写入MDST，完成LW与SW的配对，并将F/E置为1，此后LW3可以自由执行]]></content>
  </entry>
</search>
